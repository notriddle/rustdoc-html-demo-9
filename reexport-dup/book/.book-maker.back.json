{"chapters":{"undefined":{"doc":"","selection":{"ranges":[{"anchor":0,"head":0}],"main":0},"scrollTop":0},"title-page.md":{"doc":"# The Rust Programming Language\n\n*by Steve Klabnik and Carol Nichols, with contributions from the Rust Community*\n\nThis version of the text assumes you‚Äôre using Rust 1.67.1 (released 2023-02-09)\nor later. See the [‚ÄúInstallation‚Äù section of Chapter 1][install]<!-- ignore -->\nto install or update Rust.\n\nThe HTML format is available online at\n[https://doc.rust-lang.org/stable/book/](https://doc.rust-lang.org/stable/book/)\nand offline with installations of Rust made with `rustup`; run `rustup docs\n--book` to open.\n\nSeveral community [translations] are also available.\n\nThis text is available in [paperback and ebook format from No Starch\nPress][nsprust].\n\n[install]: ch01-01-installation.html\n[editions]: appendix-05-editions.html\n[nsprust]: https://nostarch.com/rust-programming-language-2nd-edition\n[translations]: appendix-06-translation.html\n\n> **üö® Want a more interactive learning experience? Try out a different version\n> of the Rust Book, featuring: quizzes, highlighting, visualizations, and\n> more**: <https://rust-book.cs.brown.edu>\n","selection":{"ranges":[{"anchor":44,"head":44}],"main":0},"scrollTop":0},"foreword.md":{"doc":"# Foreword\n\nIt wasn‚Äôt always so clear, but the Rust programming language is fundamentally\nabout *empowerment*: no matter what kind of code you are writing now, Rust\nempowers you to reach farther, to program with confidence in a wider variety of\ndomains than you did before.\n\nTake, for example, ‚Äúsystems-level‚Äù work that deals with low-level details of\nmemory management, data representation, and concurrency. Traditionally, this\nrealm of programming is seen as arcane, accessible only to a select few who\nhave devoted the necessary years learning to avoid its infamous pitfalls. And\neven those who practice it do so with caution, lest their code be open to\nexploits, crashes, or corruption.\n\nRust breaks down these barriers by eliminating the old pitfalls and providing a\nfriendly, polished set of tools to help you along the way. Programmers who need\nto ‚Äúdip down‚Äù into lower-level control can do so with Rust, without taking on\nthe customary risk of crashes or security holes, and without having to learn\nthe fine points of a fickle toolchain. Better yet, the language is designed to\nguide you naturally towards reliable code that is efficient in terms of speed\nand memory usage.\n\nProgrammers who are already working with low-level code can use Rust to raise\ntheir ambitions. For example, introducing parallelism in Rust is a relatively\nlow-risk operation: the compiler will catch the classical mistakes for you. And\nyou can tackle more aggressive optimizations in your code with the confidence\nthat you won‚Äôt accidentally introduce crashes or vulnerabilities.\n\nBut Rust isn‚Äôt limited to low-level systems programming. It‚Äôs expressive and\nergonomic enough to make CLI apps, web servers, and many other kinds of code\nquite pleasant to write ‚Äî you‚Äôll find simple examples of both later in the\nbook. Working with Rust allows you to build skills that transfer from one\ndomain to another; you can learn Rust by writing a web app, then apply those\nsame skills to target your Raspberry Pi.\n\nThis book fully embraces the potential of Rust to empower its users. It‚Äôs a\nfriendly and approachable text intended to help you level up not just your\nknowledge of Rust, but also your reach and confidence as a programmer in\ngeneral. So dive in, get ready to learn‚Äîand welcome to the Rust community!\n\n‚Äî Nicholas Matsakis and Aaron Turon\n","selection":{"ranges":[{"anchor":0,"head":0}],"main":0},"scrollTop":0},"ch00-00-introduction.md":{"doc":"# Introduction\n\n> Note: This edition of the book is the same as [The Rust Programming\n> Language][nsprust] available in print and ebook format from [No Starch\n> Press][nsp].\n\n[nsprust]: https://nostarch.com/rust-programming-language-2nd-edition\n[nsp]: https://nostarch.com/\n\nWelcome to *The Rust Programming Language*, an introductory book about Rust.\nThe Rust programming language helps you write faster, more reliable software.\nHigh-level ergonomics and low-level control are often at odds in programming\nlanguage design; Rust challenges that conflict. Through balancing powerful\ntechnical capacity and a great developer experience, Rust gives you the option\nto control low-level details (such as memory usage) without all the hassle\ntraditionally associated with such control.\n\n## Who Rust Is For\n\nRust is ideal for many people for a variety of reasons. Let‚Äôs look at a few of\nthe most important groups.\n\n### Teams of Developers\n\nRust is proving to be a productive tool for collaborating among large teams of\ndevelopers with varying levels of systems programming knowledge. Low-level code\nis prone to various subtle bugs, which in most other languages can be caught\nonly through extensive testing and careful code review by experienced\ndevelopers. In Rust, the compiler plays a gatekeeper role by refusing to\ncompile code with these elusive bugs, including concurrency bugs. By working\nalongside the compiler, the team can spend their time focusing on the program‚Äôs\nlogic rather than chasing down bugs.\n\nRust also brings contemporary developer tools to the systems programming world:\n\n* Cargo, the included dependency manager and build tool, makes adding,\n  compiling, and managing dependencies painless and consistent across the Rust\n  ecosystem.\n* The Rustfmt formatting tool ensures a consistent coding style across\n  developers.\n* The Rust Language Server powers Integrated Development Environment (IDE)\n  integration for code completion and inline error messages.\n\nBy using these and other tools in the Rust ecosystem, developers can be\nproductive while writing systems-level code.\n\n### Students\n\nRust is for students and those who are interested in learning about systems\nconcepts. Using Rust, many people have learned about topics like operating\nsystems development. The community is very welcoming and happy to answer\nstudent questions. Through efforts such as this book, the Rust teams want to\nmake systems concepts more accessible to more people, especially those new to\nprogramming.\n\n### Companies\n\nHundreds of companies, large and small, use Rust in production for a variety of\ntasks, including command line tools, web services, DevOps tooling, embedded\ndevices, audio and video analysis and transcoding, cryptocurrencies,\nbioinformatics, search engines, Internet of Things applications, machine\nlearning, and even major parts of the Firefox web browser.\n\n### Open Source Developers\n\nRust is for people who want to build the Rust programming language, community,\ndeveloper tools, and libraries. We‚Äôd love to have you contribute to the Rust\nlanguage.\n\n### People Who Value Speed and Stability\n\nRust is for people who crave speed and stability in a language. By speed, we\nmean both how quickly Rust code can run and the speed at which Rust lets you\nwrite programs. The Rust compiler‚Äôs checks ensure stability through feature\nadditions and refactoring. This is in contrast to the brittle legacy code in\nlanguages without these checks, which developers are often afraid to modify. By\nstriving for zero-cost abstractions, higher-level features that compile to\nlower-level code as fast as code written manually, Rust endeavors to make safe\ncode be fast code as well.\n\nThe Rust language hopes to support many other users as well; those mentioned\nhere are merely some of the biggest stakeholders. Overall, Rust‚Äôs greatest\nambition is to eliminate the trade-offs that programmers have accepted for\ndecades by providing safety *and* productivity, speed *and* ergonomics. Give\nRust a try and see if its choices work for you.\n\n## Who This Book Is For\n\nThis book assumes that you‚Äôve written code in another programming language but\ndoesn‚Äôt make any assumptions about which one. We‚Äôve tried to make the material\nbroadly accessible to those from a wide variety of programming backgrounds. We\ndon‚Äôt spend a lot of time talking about what programming *is* or how to think\nabout it. If you‚Äôre entirely new to programming, you would be better served by\nreading a book that specifically provides an introduction to programming.\n\n## How to Use This Book\n\nIn general, this book assumes that you‚Äôre reading it in sequence from front to\nback. Later chapters build on concepts in earlier chapters, and earlier\nchapters might not delve into details on a particular topic but will revisit\nthe topic in a later chapter.\n\nYou‚Äôll find two kinds of chapters in this book: concept chapters and project\nchapters. In concept chapters, you‚Äôll learn about an aspect of Rust. In project\nchapters, we‚Äôll build small programs together, applying what you‚Äôve learned so\nfar. Chapters 2, 12, and 20 are project chapters; the rest are concept chapters.\n\nChapter 1 explains how to install Rust, how to write a ‚ÄúHello, world!‚Äù program,\nand how to use Cargo, Rust‚Äôs package manager and build tool. Chapter 2 is a\nhands-on introduction to writing a program in Rust, having you build up a\nnumber guessing game. Here we cover concepts at a high level, and later\nchapters will provide additional detail. If you want to get your hands dirty\nright away, Chapter 2 is the place for that. Chapter 3 covers Rust features\nthat are similar to those of other programming languages, and in Chapter 4\nyou‚Äôll learn about Rust‚Äôs ownership system. If you‚Äôre a particularly meticulous\nlearner who prefers to learn every detail before moving on to the next, you\nmight want to skip Chapter 2 and go straight to Chapter 3, returning to Chapter\n2 when you‚Äôd like to work on a project applying the details you‚Äôve learned.\n\nChapter 5 discusses structs and methods, and Chapter 6 covers enums, `match`\nexpressions, and the `if let` control flow construct. You‚Äôll use structs and\nenums to make custom types in Rust.\n\nIn Chapter 7, you‚Äôll learn about Rust‚Äôs module system and about privacy rules\nfor organizing your code and its public Application Programming Interface\n(API). Chapter 8 discusses some common collection data structures that the\nstandard library provides, such as vectors, strings, and hash maps. Chapter 9\nexplores Rust‚Äôs error-handling philosophy and techniques.\n\nChapter 10 digs into generics, traits, and lifetimes, which give you the power\nto define code that applies to multiple types. Chapter 11 is all about testing,\nwhich even with Rust‚Äôs safety guarantees is necessary to ensure your program‚Äôs\nlogic is correct. In Chapter 12, we‚Äôll build our own implementation of a subset\nof functionality from the `grep` command line tool that searches for text\nwithin files. For this, we‚Äôll use many of the concepts we discussed in the\nprevious chapters.\n\nChapter 13 explores closures and iterators: features of Rust that come from\nfunctional programming languages. In Chapter 14, we‚Äôll examine Cargo in more\ndepth and talk about best practices for sharing your libraries with others.\nChapter 15 discusses smart pointers that the standard library provides and the\ntraits that enable their functionality.\n\nIn Chapter 16, we‚Äôll walk through different models of concurrent programming\nand talk about how Rust helps you to program in multiple threads fearlessly.\nChapter 17 looks at how Rust idioms compare to object-oriented programming\nprinciples you might be familiar with.\n\nChapter 18 is a reference on patterns and pattern matching, which are powerful\nways of expressing ideas throughout Rust programs. Chapter 19 contains a\nsmorgasbord of advanced topics of interest, including unsafe Rust, macros, and\nmore about lifetimes, traits, types, functions, and closures.\n\nIn Chapter 20, we‚Äôll complete a project in which we‚Äôll implement a low-level\nmultithreaded web server!\n\nFinally, some appendices contain useful information about the language in a\nmore reference-like format. Appendix A covers Rust‚Äôs keywords, Appendix B\ncovers Rust‚Äôs operators and symbols, Appendix C covers derivable traits\nprovided by the standard library, Appendix D covers some useful development\ntools, and Appendix E explains Rust editions. In Appendix F, you can find\ntranslations of the book, and in Appendix G we‚Äôll cover how Rust is made and\nwhat nightly Rust is.\n\nThere is no wrong way to read this book: if you want to skip ahead, go for it!\nYou might have to jump back to earlier chapters if you experience any\nconfusion. But do whatever works for you.\n\n<span id=\"ferris\"></span>\n\nAn important part of the process of learning Rust is learning how to read the\nerror messages the compiler displays: these will guide you toward working code.\nAs such, we‚Äôll provide many examples that don‚Äôt compile along with the error\nmessage the compiler will show you in each situation. Know that if you enter\nand run a random example, it may not compile! Make sure you read the\nsurrounding text to see whether the example you‚Äôre trying to run is meant to\nerror. Ferris will also help you distinguish code that isn‚Äôt meant to work:\n\n| Ferris                                                                                                           | Meaning                                          |\n|------------------------------------------------------------------------------------------------------------------|--------------------------------------------------|\n| <img src=\"img/ferris/does_not_compile.svg\" class=\"ferris-explain\" alt=\"Ferris with a question mark\"/>            | This code does not compile!                      |\n| <img src=\"img/ferris/panics.svg\" class=\"ferris-explain\" alt=\"Ferris throwing up their hands\"/>                   | This code panics!                                |\n| <img src=\"img/ferris/not_desired_behavior.svg\" class=\"ferris-explain\" alt=\"Ferris with one claw up, shrugging\"/> | This code does not produce the desired behavior. |\n\nIn most situations, we‚Äôll lead you to the correct version of any code that\ndoesn‚Äôt compile.\n\n## Source Code\n\nThe source files from which this book is generated can be found on\n[GitHub][book].\n\n[book]: https://github.com/rust-lang/book/tree/main/src\n","selection":{"ranges":[{"anchor":9265,"head":9265}],"main":0},"scrollTop":3829},"ch01-00-getting-started.md":{"doc":"# Getting Started\n\nLet‚Äôs start your Rust journey! There‚Äôs a lot to learn, but every journey starts\nsomewhere. In this chapter, we‚Äôll discuss:\n\n* Installing Rust on Linux, macOS, and Windows\n* Writing a program that prints `Hello, world!`\n* Using `cargo`, Rust‚Äôs package manager and build system\n","selection":{"ranges":[{"anchor":0,"head":0}],"main":0},"scrollTop":0},"ch01-01-installation.md":{"doc":"## Installation\n\nThe first step is to install Rust. We‚Äôll download Rust through `rustup`, a\ncommand line tool for managing Rust versions and associated tools. You‚Äôll need\nan internet connection for the download.\n\n> Note: If you prefer not to use `rustup` for some reason, please see the\n> [Other Rust Installation Methods page][otherinstall] for more options.\n\nThe following steps install the latest stable version of the Rust compiler.\nRust‚Äôs stability guarantees ensure that all the examples in the book that\ncompile will continue to compile with newer Rust versions. The output might\ndiffer slightly between versions because Rust often improves error messages and\nwarnings. In other words, any newer, stable version of Rust you install using\nthese steps should work as expected with the content of this book.\n\n> ### Command Line Notation\n>\n> In this chapter and throughout the book, we‚Äôll show some commands used in the\n> terminal. Lines that you should enter in a terminal all start with `$`. You\n> don‚Äôt need to type the `$` character; it‚Äôs the command line prompt shown to\n> indicate the start of each command. Lines that don‚Äôt start with `$` typically\n> show the output of the previous command. Additionally, PowerShell-specific\n> examples will use `>` rather than `$`.\n\n### Installing `rustup` on Linux or macOS\n\nIf you‚Äôre using Linux or macOS, open a terminal and enter the following command:\n\n```console\n$ curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n```\n\nThe command downloads a script and starts the installation of the `rustup`\ntool, which installs the latest stable version of Rust. You might be prompted\nfor your password. If the install is successful, the following line will appear:\n\n```text\nRust is installed now. Great!\n```\n\nYou will also need a *linker*, which is a program that Rust uses to join its\ncompiled outputs into one file. It is likely you already have one. If you get\nlinker errors, you should install a C compiler, which will typically include a\nlinker. A C compiler is also useful because some common Rust packages depend on\nC code and will need a C compiler.\n\nOn macOS, you can get a C compiler by running:\n\n```console\n$ xcode-select --install\n```\n\nLinux users should generally install GCC or Clang, according to their\ndistribution‚Äôs documentation. For example, if you use Ubuntu, you can install\nthe `build-essential` package.\n\n### Installing `rustup` on Windows\n\nOn Windows, go to [https://www.rust-lang.org/tools/install][install] and follow\nthe instructions for installing Rust. At some point in the installation, you‚Äôll\nreceive a message explaining that you‚Äôll also need the MSVC build tools for\nVisual Studio 2013 or later.\n\nTo acquire the build tools, you‚Äôll need to install [Visual Studio\n2022][visualstudio]. When asked which workloads to install, include:\n\n* ‚ÄúDesktop Development with C++‚Äù\n* The Windows 10 or 11 SDK\n* The English language pack component, along with any other language pack of\n  your choosing\n\nThe rest of this book uses commands that work in both *cmd.exe* and PowerShell.\nIf there are specific differences, we‚Äôll explain which to use.\n\n### Troubleshooting\n\nTo check whether you have Rust installed correctly, open a shell and enter this\nline:\n\n```console\n$ rustc --version\n```\n\nYou should see the version number, commit hash, and commit date for the latest\nstable version that has been released, in the following format:\n\n```text\nrustc x.y.z (abcabcabc yyyy-mm-dd)\n```\n\nIf you see this information, you have installed Rust successfully! If you don‚Äôt\nsee this information, check that Rust is in your `%PATH%` system variable as\nfollows.\n\nIn Windows CMD, use:\n\n```console\n> echo %PATH%\n```\n\nIn PowerShell, use:\n\n```powershell\n> echo $env:Path\n```\n\nIn Linux and macOS, use:\n\n```console\n$ echo $PATH\n```\n\nIf that‚Äôs all correct and Rust still isn‚Äôt working, there are a number of\nplaces you can get help. Find out how to get in touch with other Rustaceans (a\nsilly nickname we call ourselves) on [the community page][community].\n\n### Updating and Uninstalling\n\nOnce Rust is installed via `rustup`, updating to a newly released version is\neasy. From your shell, run the following update script:\n\n```console\n$ rustup update\n```\n\nTo uninstall Rust and `rustup`, run the following uninstall script from your\nshell:\n\n```console\n$ rustup self uninstall\n```\n\n### Local Documentation\n\nThe installation of Rust also includes a local copy of the documentation so\nthat you can read it offline. Run `rustup doc` to open the local documentation\nin your browser.\n\nAny time a type or function is provided by the standard library and you‚Äôre not\nsure what it does or how to use it, use the application programming interface\n(API) documentation to find out!\n\n[otherinstall]: https://forge.rust-lang.org/infra/other-installation-methods.html\n[install]: https://www.rust-lang.org/tools/install\n[visualstudio]: https://visualstudio.microsoft.com/downloads/\n[community]: https://www.rust-lang.org/community\n","selection":{"ranges":[{"anchor":0,"head":0}],"main":0},"scrollTop":0}}}